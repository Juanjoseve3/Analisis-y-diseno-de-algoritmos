###################### RadixSort ############################################

def count_digits(number):
  if(number<10 and number>0):
    return 1
  else:
    if number < 0:
      positiveNumber = number * (-1)
    else:
      positiveNumber = number
    return 1 + count_digits(positiveNumber//10)

def n_Number(lista):
  copia_lista = lista.copy()
  if lista != []:
    for i in range(len(copia_lista)-1):
      if count_digits(copia_lista[0]) < count_digits(copia_lista[1]):
        n = copia_lista[1]
        copia_lista.pop(0)
      else:
        n = copia_lista[0]
        copia_lista.pop(1)
    return count_digits(n)
  else:
    return 0

def zero_completion(lista):
  n = n_Number(lista)
  new_list = []
  for i in lista:
    if count_digits(i) < n:
      fullNumber = f'{i:0{n}d}'
      #fullNumberInt = int(fullNumber)
      new_list.append(fullNumber)
    else:
      fullNumberStr = str(i)
      new_list.append(fullNumberStr)
  return new_list

def radixSort(lista):
  vector = []
  for i in range(10):
    vector.append([])
  contador = -1
  for i in range(len(lista[0])):
    for i in lista:
      if i[contador] == "0":
        vector[0].append(i)
      if i[contador] == "1":
        vector[1].append(i)
      if i[contador] == "2":
        vector[2].append(i)
      if i[contador] == "3":
        vector[3].append(i)
      if i[contador] == "4":
        vector[4].append(i)
      if i[contador] == "5":
        vector[5].append(i)
      if i[contador] == "6":
        vector[6].append(i)
      if i[contador] == "7":
        vector[7].append(i)
      if i[contador] == "8":
        vector[8].append(i)
      if i[contador] == "9":
        vector[9].append(i)
    contador -= 1
    acumulador = []
    for i in vector:
      if i != []:
        acumulador = acumulador + i
    lista = acumulador
    vector = [[],[],[],[],[],[],[],[],[],[]]

  final_list = []
  for i in acumulador:
    final_list.append(int(i))

  return final_list

##################################### MergeSort ###########################################################

def merge(lista_left, lista_right):
  lista_resultado = []
  while(len(lista_left) > 0 and len(lista_right) > 0):
    if lista_left[0] < lista_right[0]:
      lista_resultado.append(lista_left[0])
      lista_left = lista_left[1:]
    else:
      lista_resultado.append(lista_right[0])
      lista_right = lista_right[1:]

  if len(lista_left) > 0:
    lista_resultado = lista_resultado + lista_left
  if len(lista_right) > 0:
    lista_resultado = lista_resultado + lista_right

  return lista_resultado


def mergeSort(lista):
  if len(lista) <= 1:
    return lista

  lista_izquierda = lista[:len(lista)//2]
  lista_derecha = lista[len(lista)//2:]

  lista_izquierda = mergeSort(lista_izquierda)
  lista_derecha = mergeSort(lista_derecha)

  return merge(lista_izquierda, lista_derecha)

################################### QuickSort ###############################################
def Quicksort(listaPrincipal, l1, l2, pivote):
  if(ajshjadh):
    return 0
  else:
    comparedItem = listaPrincipal[0]
    if(pivote >= comparedItem):
      l1.append(comparedItem)
      
########################################### Burbuja ######################################################
def burbuja(lista):         
tamaño = len(lista) - 1
for i in range(1, tamaño):
  for j in range(0, tamaño):
    if lista[j] > lista[j+1]:
      temp = lista[j]
      lista[j] = lista[j+1]
      lista[j+1] = temp
return lista
