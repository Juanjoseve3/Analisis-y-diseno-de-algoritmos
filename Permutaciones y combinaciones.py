# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nx0gYGdRcozNYECWbDRUC0EmdJWglKaD
"""

def factorial_de_un_numero(numero):
  numero_inicial = numero
  while numero > 1:
    numero -= 1
    numero_inicial *= numero
  return numero_inicial

#hay que empezar a jugar con estas pregunta para los condicionales
print('BIENVENIDOS A PERMUTACIONES Y COMBINACIONES RECUERDA LAS ESTRUCTURAS DE LA AMBAS Y SUS CASOS ESPECÍFICOS, Y ANALIZA EL PROBLEMA')
quiere = str(input("Quieres Continuar? si/no: "))
if quiere == 'no':
  print('GRACIAS POR INTENTARLO:)')
else:
  primera_pregunta = str(input("¿Importa el orden? si/no: "))
  segunda_pregunta = str(input("¿Intervienen todos los elementos? si/no: "))
  tercera_pregunta = str(input("¿Se repiten los elementos? si/no: "))
  if(primera_pregunta == "si" and segunda_pregunta == "si" and tercera_pregunta == "si"):
    palabra = str(input("Ingrese la Palabra o conjunto: "))
  else:
    numero_de_elementos = int(input("ingrese el numero de elementos: "))
    elementos_a_agrupar = int(input("ingrese el numero de elementos a agrupar: "))
  
class Combinaciones_Permutaciones:
  
  def __init__(self, palabra, numero_de_elementos, elementos_a_agrupar):
    self.m = numero_de_elementos  
    self.n = elementos_a_agrupar # cuando llamemos la clase ahi vamos a poner los datos
    self.p = palabra

  def combinaciones_ordinarias(self):
    m = self.m
    n = self.n
    resta_de_la_operacion = m-n #se tiene que hacer este tipo de operaciones por parte para que no lanze un error 
    m = factorial_de_un_numero(m) 
    n = factorial_de_un_numero(n)
    resultado_resta = factorial_de_un_numero(resta_de_la_operacion) #el resultado de mi resta lo factorizo
    operacion = m//(n*resultado_resta) #aca ya hago toda la operecion para ordinarias
    return operacion
  
  def combinaciones_con_repeticion(self):
    m = self.m
    n = self.n
    suma_de_la_operacion = m+n-1
    resta_de_la_operacion = m-1
    m = factorial_de_un_numero(m)
    n = factorial_de_un_numero(n)
    resultado_suma = factorial_de_un_numero(suma_de_la_operacion)
    resultado_resta = factorial_de_un_numero(resta_de_la_operacion)
    operacion = resultado_suma//(n*resultado_resta)
    return operacion

#me surgio una idea el condicional de las preguntas va ejecutar todas mis funciones anteriores 
  def permutacion_variciones_ordinarias(self):
    m = self.m
    n = self.n
    resta_de_la_operacion = m-n
    m = factorial_de_un_numero(m)
    n = factorial_de_un_numero(n)
    resultado_resta = factorial_de_un_numero(resta_de_la_operacion)
    operacion = m//n
    resultado_resta
    return operacion

  def permutacion_variciones_con_repeticion(self):
    m = self.m
    n = self.n
    operacion = m**n
    return operacion
  
  def permutaciones_ordinarias(self):
    m = factorial_de_un_numero(self.m)
    return m

  def contarLetras(self,palabra):
    cuentaLetras = {}
    for letra in palabra:
        cuentaLetras[letra] = palabra.count(letra)
    return cuentaLetras

  def permutacionRepeticion(self,palabra):
    ocurrencias = list(self.contarLetras(palabra).values() )
    denominador = 1
    for numero in ocurrencias:
      denominador *= factorial_de_un_numero(numero)
      numerador = factorial_de_un_numero( len(palabra) )
    return numerador//denominador

  def devolver_valor_de_operacion(self):
    if(primera_pregunta == "si" and segunda_pregunta == "no" and tercera_pregunta == "no"):
      return self.permutacion_variciones_ordinarias()

    elif(primera_pregunta == "si" and segunda_pregunta == "no" and tercera_pregunta == "si"):
      return self.permutacion_variciones_con_repeticion()
    
    elif(primera_pregunta == "si" and segunda_pregunta == "si" and tercera_pregunta == "no"):
      return self.permutaciones_ordinarias()
    
    elif(primera_pregunta == "si" and segunda_pregunta == "si" and tercera_pregunta == "si"):
      return self.permutacionRepeticion(self.p)

    #--------------------------------arriba estan las permutaciones------------------------

    elif(primera_pregunta == "no" and segunda_pregunta == "no" and tercera_pregunta == "no"):
      return self.combinaciones_ordinarias()

    else:
      if(primera_pregunta == "no" and segunda_pregunta == "no" and tercera_pregunta == "si"):
        return self.combinaciones_con_repeticion()  


if(primera_pregunta == "si" and segunda_pregunta == "si" and tercera_pregunta == "si"):
  p = Combinaciones_Permutaciones(palabra,numero_de_elementos=0,elementos_a_agrupar=0)
else:
  palabra = None
  p = Combinaciones_Permutaciones(palabra, numero_de_elementos, elementos_a_agrupar)

if quiere != 'no': 
 print('TU RESULTADO ES:', p.devolver_valor_de_operacion())

 #Referencias
 #https://programminghistorian.org/es/lecciones/contar-frecuencias